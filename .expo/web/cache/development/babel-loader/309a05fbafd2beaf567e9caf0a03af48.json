{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UpdateLastSeenAndStatus } from \"../features/auth/authSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction UserTest() {\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var dispatch = useDispatch();\n  var lastSeen = null;\n  if (user) {\n    var lastSeen = moment(user.lastSeen).format(\" LT\");\n  }\n  var _useState = useState(\"online\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    online = _useState2[0],\n    setOnle = _useState2[1];\n  var _useState3 = useState(\"offline\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    offline = _useState4[0],\n    setOffline = _useState4[1];\n  var sendUpdatedData = function sendUpdatedData(status, userId) {\n    console.log(userId);\n    var userData = {\n      status: status,\n      userId: userId\n    };\n    dispatch(UpdateLastSeenAndStatus(userData));\n  };\n  var getuser = function () {\n    var _ref = _asyncToGenerator(function* () {\n      console.log(yield AsyncStorage.getItem('user'));\n    });\n    return function getuser() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(Pressable, {\n      onPress: function onPress() {\n        return sendUpdatedData(online, user._id);\n      },\n      children: _jsx(Text, {\n        children: \"click here to get updated user status\"\n      })\n    }), _jsx(View, {\n      children: _jsx(Pressable, {\n        onPress: function onPress() {\n          return getuser();\n        },\n        children: _jsx(Text, {\n          children: \"click here to get updated user infor\"\n        })\n      })\n    }), _jsxs(Text, {\n      children: [\"user last time before exiting app \", lastSeen, \" \"]\n    })]\n  });\n}\nexport default UserTest;","map":{"version":3,"names":["AsyncStorage","moment","React","useEffect","useState","useDispatch","useSelector","UpdateLastSeenAndStatus","UserTest","state","auth","user","dispatch","lastSeen","format","online","setOnle","offline","setOffline","sendUpdatedData","status","userId","console","log","userData","getuser","getItem","_id"],"sources":["/home/dagmawi/personal/borsa/ui/borsa-ui/src/screens/UserTest.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\nimport moment from 'moment'\nimport React, { useEffect } from 'react'\nimport { useState } from 'react'\nimport { Pressable, Text } from 'react-native'\nimport { View } from 'react-native'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { UpdateLastSeenAndStatus } from '../features/auth/authSlice'\n\nfunction UserTest() {\n\n    const { user } = useSelector((state) => state.auth)\n    const dispatch = useDispatch()\n    var lastSeen = null\n    if(user){\n      var lastSeen = moment(user.lastSeen).format(\" LT\")\n    }\n    \n    // const [lastSeen, setlastSeen] = useState(moment(user.lastSeen).format(\" LT\"))\n    const [online, setOnle] = useState(\"online\")\n    const [offline, setOffline] = useState(\"offline\")\n    const sendUpdatedData = (status, userId) => {\n      // console.log('one')\n      console.log(userId)\n      const userData = {\n        status: status,\n        userId: userId\n      }\n     dispatch(UpdateLastSeenAndStatus(userData))\n    }\n    const getuser = async() => {\n      console.log( await AsyncStorage.getItem('user'))\n    }\n  //  console.log(user)\n  return (\n    <View>\n      <Pressable onPress={() => sendUpdatedData(online, user._id)}>\n        <Text>click here to get updated user status</Text>\n\n      </Pressable>\n      <View>\n      <Pressable onPress={() => getuser()}>\n        <Text>click here to get updated user infor</Text>\n\n      </Pressable>\n      </View>\n        <Text>user last time before exiting app {lastSeen} </Text> \n        {/* <Text>{user.status}</Text> */}\n    </View>\n  )\n}\n\nexport default UserTest"],"mappings":";;AAAA,OAAOA,YAAY,MAAM,2CAA2C;AACpE,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAAA;AAAA;AAAA;AAGhC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,uBAAuB;AAAoC;AAAA;AAEpE,SAASC,QAAQ,GAAG;EAEhB,mBAAiBF,WAAW,CAAC,UAACG,KAAK;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAA3CC,IAAI,gBAAJA,IAAI;EACZ,IAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,IAAIQ,QAAQ,GAAG,IAAI;EACnB,IAAGF,IAAI,EAAC;IACN,IAAIE,QAAQ,GAAGZ,MAAM,CAACU,IAAI,CAACE,QAAQ,CAAC,CAACC,MAAM,CAAC,KAAK,CAAC;EACpD;EAGA,gBAA0BV,QAAQ,CAAC,QAAQ,CAAC;IAAA;IAArCW,MAAM;IAAEC,OAAO;EACtB,iBAA8BZ,QAAQ,CAAC,SAAS,CAAC;IAAA;IAA1Ca,OAAO;IAAEC,UAAU;EAC1B,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,MAAM,EAAEC,MAAM,EAAK;IAE1CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,IAAMG,QAAQ,GAAG;MACfJ,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA;IACV,CAAC;IACFT,QAAQ,CAACL,uBAAuB,CAACiB,QAAQ,CAAC,CAAC;EAC5C,CAAC;EACD,IAAMC,OAAO;IAAA,6BAAG,aAAW;MACzBH,OAAO,CAACC,GAAG,OAAQvB,YAAY,CAAC0B,OAAO,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAAA,gBAFKD,OAAO;MAAA;IAAA;EAAA,GAEZ;EAEH,OACE,MAAC,IAAI;IAAA,WACH,KAAC,SAAS;MAAC,OAAO,EAAE;QAAA,OAAMN,eAAe,CAACJ,MAAM,EAAEJ,IAAI,CAACgB,GAAG,CAAC;MAAA,CAAC;MAAA,UAC1D,KAAC,IAAI;QAAA,UAAC;MAAqC;IAAO,EAExC,EACZ,KAAC,IAAI;MAAA,UACL,KAAC,SAAS;QAAC,OAAO,EAAE;UAAA,OAAMF,OAAO,EAAE;QAAA,CAAC;QAAA,UAClC,KAAC,IAAI;UAAA,UAAC;QAAoC;MAAO;IAEvC,EACL,EACL,MAAC,IAAI;MAAA,WAAC,oCAAkC,EAACZ,QAAQ,EAAC,GAAC;IAAA,EAAO;EAAA,EAEvD;AAEX;AAEA,eAAeL,QAAQ"},"metadata":{},"sourceType":"module"}