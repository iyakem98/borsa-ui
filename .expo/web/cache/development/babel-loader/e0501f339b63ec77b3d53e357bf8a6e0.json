{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useState, useEffect, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: false,\n        shouldSetBadge: false\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nfunction sendPushNotification(_x) {\n  return _sendPushNotification.apply(this, arguments);\n}\nfunction _sendPushNotification() {\n  _sendPushNotification = _asyncToGenerator(function* (expoPushToken) {\n    var message = {\n      to: expoPushToken,\n      sound: 'default',\n      title: 'Original Title',\n      body: 'And here is the body!',\n      data: {\n        someData: 'goes here'\n      }\n    };\n    yield fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(message)\n    });\n  });\n  return _sendPushNotification.apply(this, arguments);\n}\nfunction registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (yield Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction PushScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'space-around'\n    },\n    children: [_jsxs(Text, {\n      children: [\"Your expo push token: \", expoPushToken]\n    }), _jsxs(View, {\n      style: {\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsxs(Text, {\n        children: [\"Title: \", notification && notification.request.content.title, \" \"]\n      }), _jsxs(Text, {\n        children: [\"Body: \", notification && notification.request.content.body]\n      }), _jsxs(Text, {\n        children: [\"Data: \", notification && JSON.stringify(notification.request.content.data)]\n      })]\n    }), _jsx(Button, {\n      title: \"Press to Send Notification\",\n      onPress: _asyncToGenerator(function* () {\n        yield sendPushNotification(expoPushToken);\n      })\n    })]\n  });\n}\nexport default PushScreen;","map":{"version":3,"names":["useState","useEffect","useRef","Device","Notifications","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","sendPushNotification","expoPushToken","message","to","sound","title","body","data","someData","fetch","method","headers","Accept","JSON","stringify","registerForPushNotificationsAsync","token","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","PushScreen","setExpoPushToken","notification","setNotification","notificationListener","responseListener","then","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","removeNotificationSubscription","flex","alignItems","justifyContent","request","content"],"sources":["/home/dagmawi/personal/borsa/ui/borsa-ui/src/screens/PushScreen.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Can use this function below OR use Expo's Push Notification Tool from: https://expo.dev/notifications\nasync function sendPushNotification(expoPushToken) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: 'And here is the body!',\n    data: { someData: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n\nfunction PushScreen() {\n    const [expoPushToken, setExpoPushToken] = useState('');\n    const [notification, setNotification] = useState(false);\n    const notificationListener = useRef();\n    const responseListener = useRef();\n  \n    useEffect(() => {\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n  \n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n        setNotification(notification);\n      });\n  \n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n        console.log(response);\n      });\n  \n      return () => {\n        Notifications.removeNotificationSubscription(notificationListener.current);\n        Notifications.removeNotificationSubscription(responseListener.current);\n      };\n    }, []);\n  \n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around' }}>\n        <Text>Your expo push token: {expoPushToken}</Text>\n        <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n          <Text>Title: {notification && notification.request.content.title} </Text>\n          <Text>Body: {notification && notification.request.content.body}</Text>\n          <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n        </View>\n        <Button\n          title=\"Press to Send Notification\"\n          onPress={async () => {\n            await sendPushNotification(expoPushToken);\n          }}\n        />\n      </View>\n    );\n}\n\nexport default PushScreen"],"mappings":"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"},"metadata":{},"sourceType":"module"}