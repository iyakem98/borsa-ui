{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport ExpoGoogleSignIn from \"./ExpoGoogleSignIn\";\nimport GoogleUser from \"./GoogleUser\";\nvar ERRORS = ExpoGoogleSignIn.ERRORS,\n  SCOPES = ExpoGoogleSignIn.SCOPES,\n  TYPES = ExpoGoogleSignIn.TYPES;\nexport { ERRORS, SCOPES, TYPES };\nvar DEFAULT_SCOPES = [SCOPES.PROFILE, SCOPES.EMAIL];\nvar _initialization;\nvar _options;\nvar _currentUser = null;\nvar _isClientUsageEnabled = false;\nfunction setCurrentUser(currentUser) {\n  _currentUser = currentUser;\n  return _currentUser;\n}\nfunction validateOptions(options) {\n  if (!options) {\n    return {\n      scopes: DEFAULT_SCOPES\n    };\n  }\n  if (options.isOfflineEnabled) {\n    invariant(typeof options.webClientId === 'string' && options.webClientId !== '', 'GoogleSignIn: Offline access (isOfflineEnabled: true) requires a valid google server id `webClientId`');\n  }\n  return _objectSpread(_objectSpread({}, options), {}, {\n    scopes: options.scopes || DEFAULT_SCOPES\n  });\n}\nfunction validateOwnership() {\n  invariant(_isClientUsageEnabled || Constants.appOwnership !== 'expo', 'expo-google-sign-in is not supported in the Expo Client because a custom URL scheme is required at build time. Please refer to the docs for usage outside of Expo www.npmjs.com/package/expo-google-sign-in');\n}\nfunction ensureGoogleIsInitializedAsync(_x) {\n  return _ensureGoogleIsInitializedAsync.apply(this, arguments);\n}\nfunction _ensureGoogleIsInitializedAsync() {\n  _ensureGoogleIsInitializedAsync = _asyncToGenerator(function* (options) {\n    if (_initialization == null) {\n      return initAsync(options);\n    }\n    return _initialization;\n  });\n  return _ensureGoogleIsInitializedAsync.apply(this, arguments);\n}\nfunction invokeAuthMethod(_x2) {\n  return _invokeAuthMethod.apply(this, arguments);\n}\nfunction _invokeAuthMethod() {\n  _invokeAuthMethod = _asyncToGenerator(function* (method) {\n    if (!ExpoGoogleSignIn[method]) {\n      throw new UnavailabilityError('GoogleSignIn', method);\n    }\n    yield ensureGoogleIsInitializedAsync();\n    var payload = yield ExpoGoogleSignIn[method]();\n    var account = payload != null ? new GoogleUser(payload) : null;\n    return setCurrentUser(account);\n  });\n  return _invokeAuthMethod.apply(this, arguments);\n}\nexport function allowInClient() {\n  _isClientUsageEnabled = true;\n}\nexport function getCurrentUser() {\n  return _currentUser;\n}\nexport function askForPlayServicesAsync() {\n  return _askForPlayServicesAsync.apply(this, arguments);\n}\nfunction _askForPlayServicesAsync() {\n  _askForPlayServicesAsync = _asyncToGenerator(function* () {\n    return yield getPlayServiceAvailability(true);\n  });\n  return _askForPlayServicesAsync.apply(this, arguments);\n}\nexport function getPlayServiceAvailability() {\n  return _getPlayServiceAvailability.apply(this, arguments);\n}\nfunction _getPlayServiceAvailability() {\n  _getPlayServiceAvailability = _asyncToGenerator(function* () {\n    var shouldAsk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    validateOwnership();\n    if (ExpoGoogleSignIn.arePlayServicesAvailableAsync) {\n      return yield ExpoGoogleSignIn.arePlayServicesAvailableAsync(shouldAsk);\n    } else {\n      return true;\n    }\n  });\n  return _getPlayServiceAvailability.apply(this, arguments);\n}\nexport function initAsync(_x3) {\n  return _initAsync.apply(this, arguments);\n}\nfunction _initAsync() {\n  _initAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoGoogleSignIn.initAsync) {\n      throw new UnavailabilityError('GoogleSignIn', 'initAsync');\n    }\n    _options = validateOptions(options || _options || {});\n    var hasPlayServices = yield getPlayServiceAvailability();\n    if (!hasPlayServices) {\n      return;\n    }\n    _initialization = ExpoGoogleSignIn.initAsync(_options || {});\n    return _initialization;\n  });\n  return _initAsync.apply(this, arguments);\n}\nexport function isSignedInAsync() {\n  return _isSignedInAsync.apply(this, arguments);\n}\nfunction _isSignedInAsync() {\n  _isSignedInAsync = _asyncToGenerator(function* () {\n    var user = yield getCurrentUserAsync();\n    return user != null;\n  });\n  return _isSignedInAsync.apply(this, arguments);\n}\nexport function isConnectedAsync() {\n  return _isConnectedAsync.apply(this, arguments);\n}\nfunction _isConnectedAsync() {\n  _isConnectedAsync = _asyncToGenerator(function* () {\n    return yield ExpoGoogleSignIn.isConnectedAsync();\n  });\n  return _isConnectedAsync.apply(this, arguments);\n}\nexport function signInSilentlyAsync() {\n  return _signInSilentlyAsync.apply(this, arguments);\n}\nfunction _signInSilentlyAsync() {\n  _signInSilentlyAsync = _asyncToGenerator(function* () {\n    var isConnected = yield isConnectedAsync();\n    if (isConnected) {\n      try {\n        var auth = yield invokeAuthMethod('signInSilentlyAsync');\n        return auth;\n      } catch (error) {\n        if (error.code === ERRORS.SIGN_IN_REQUIRED) {\n          return null;\n        }\n        throw error;\n      }\n    }\n    return null;\n  });\n  return _signInSilentlyAsync.apply(this, arguments);\n}\nexport function signInAsync() {\n  return _signInAsync.apply(this, arguments);\n}\nfunction _signInAsync() {\n  _signInAsync = _asyncToGenerator(function* () {\n    try {\n      var user = yield invokeAuthMethod('signInAsync');\n      return {\n        type: 'success',\n        user: user\n      };\n    } catch (error) {\n      if (error.code === ERRORS.SIGN_IN_CANCELLED) {\n        return {\n          type: 'cancel',\n          user: null\n        };\n      }\n      throw error;\n    }\n  });\n  return _signInAsync.apply(this, arguments);\n}\nexport function signOutAsync() {\n  return _signOutAsync.apply(this, arguments);\n}\nfunction _signOutAsync() {\n  _signOutAsync = _asyncToGenerator(function* () {\n    yield invokeAuthMethod('signOutAsync');\n  });\n  return _signOutAsync.apply(this, arguments);\n}\nexport function disconnectAsync() {\n  return _disconnectAsync.apply(this, arguments);\n}\nfunction _disconnectAsync() {\n  _disconnectAsync = _asyncToGenerator(function* () {\n    yield invokeAuthMethod('disconnectAsync');\n  });\n  return _disconnectAsync.apply(this, arguments);\n}\nexport function getCurrentUserAsync() {\n  return _getCurrentUserAsync.apply(this, arguments);\n}\nfunction _getCurrentUserAsync() {\n  _getCurrentUserAsync = _asyncToGenerator(function* () {\n    return yield invokeAuthMethod('getCurrentUserAsync');\n  });\n  return _getCurrentUserAsync.apply(this, arguments);\n}\nexport function getPhotoAsync() {\n  return _getPhotoAsync.apply(this, arguments);\n}\nfunction _getPhotoAsync() {\n  _getPhotoAsync = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    if (!ExpoGoogleSignIn.getPhotoAsync) {\n      throw new UnavailabilityError('GoogleSignIn', 'getPhotoAsync');\n    }\n    yield ensureGoogleIsInitializedAsync();\n    return yield ExpoGoogleSignIn.getPhotoAsync(size);\n  });\n  return _getPhotoAsync.apply(this, arguments);\n}\nexport { default as GoogleAuthData } from \"./GoogleAuthData\";\nexport { default as GoogleAuthentication } from \"./GoogleAuthentication\";\nexport { default as GoogleIdentity } from \"./GoogleIdentity\";\nexport { default as GoogleUser } from \"./GoogleUser\";","map":{"version":3,"mappings":";;;;AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,SAASC,mBAAmB,QAAQ,mBAAmB;AACvD,OAAOC,SAAS,MAAM,WAAW;AAEjC,OAAOC,gBAAgB;AAEvB,OAAOC,UAAU;AAEV,IAELC,MAAM,GAKJF,gBAAgB,CALlBE,MAAM;EAENC,MAAM,GAGJH,gBAAgB,CAHlBG,MAAM;EAENC,KAAK,GACHJ,gBAAgB,CADlBI,KAAK;AACc;AAErB,IAAMC,cAAc,GAAG,CAACF,MAAM,CAACG,OAAO,EAAEH,MAAM,CAACI,KAAK,CAAC;AAErD,IAAIC,eAA8B;AAClC,IAAIC,QAA6B;AACjC,IAAIC,YAAY,GAAsB,IAAI;AAC1C,IAAIC,qBAAqB,GAAG,KAAK;AAEjC,SAASC,cAAc,CAACC,WAA8B;EACpDH,YAAY,GAAGG,WAAW;EAC1B,OAAOH,YAAY;AACrB;AAEA,SAASI,eAAe,CAACC,OAA6B;EACpD,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO;MACLC,MAAM,EAAEX;KACT;;EAEH,IAAIU,OAAO,CAACE,gBAAgB,EAAE;IAC5BlB,SAAS,CACP,OAAOgB,OAAO,CAACG,WAAW,KAAK,QAAQ,IAAIH,OAAO,CAACG,WAAW,KAAK,EAAE,EACrE,uGAAuG,CACxG;;EAGH,uCACKH,OAAO;IACVC,MAAM,EAAED,OAAO,CAACC,MAAM,IAAIX;EAAc;AAE5C;AAEA,SAASc,iBAAiB;EACxBpB,SAAS,CACPY,qBAAqB,IAAId,SAAS,CAACuB,YAAY,KAAK,MAAM,EAC1D,6MAA6M,CAC9M;AACH;AAAC,SAEcC,8BAA8B;EAAA;AAAA;AAAA;EAAA,oDAA7C,WAA8CN,OAA6B;IACzE,IAAIP,eAAe,IAAI,IAAI,EAAE;MAC3B,OAAOc,SAAS,CAACP,OAAO,CAAC;;IAE3B,OAAOP,eAAe;EACxB,CAAC;EAAA;AAAA;AAAA,SAEce,gBAAgB;EAAA;AAAA;AAAA;EAAA,sCAA/B,WAAgCC,MAAc;IAC5C,IAAI,CAACxB,gBAAgB,CAACwB,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAI1B,mBAAmB,CAAC,cAAc,EAAE0B,MAAM,CAAC;;IAEvD,MAAMH,8BAA8B,EAAE;IACtC,IAAMI,OAAO,SAASzB,gBAAgB,CAACwB,MAAM,CAAC,EAAE;IAChD,IAAME,OAAO,GAAGD,OAAO,IAAI,IAAI,GAAG,IAAIxB,UAAU,CAACwB,OAAO,CAAC,GAAG,IAAI;IAChE,OAAOb,cAAc,CAACc,OAAO,CAAC;EAChC,CAAC;EAAA;AAAA;AAGD,OAAM,SAAUC,aAAa;EAC3BhB,qBAAqB,GAAG,IAAI;AAC9B;AAGA,OAAM,SAAUiB,cAAc;EAC5B,OAAOlB,YAAY;AACrB;AAGA,gBAAsBmB,uBAAuB;EAAA;AAAA;AAE5C;EAAA,6CAFM,aAAsC;IAC3C,aAAaC,0BAA0B,CAAC,IAAI,CAAC;EAC/C,CAAC;EAAA;AAAA;AAGD,gBAAsBA,0BAA0B;EAAA;AAAA;AAQ/C;EAAA,gDARM,aAAoE;IAAA,IAA1BC,gFAAqB,KAAK;IACzEZ,iBAAiB,EAAE;IAEnB,IAAInB,gBAAgB,CAACgC,6BAA6B,EAAE;MAClD,aAAahC,gBAAgB,CAACgC,6BAA6B,CAACD,SAAS,CAAC;KACvE,MAAM;MACL,OAAO,IAAI;;EAEf,CAAC;EAAA;AAAA;AAGD,gBAAsBT,SAAS;EAAA;AAAA;AAe9B;EAAA,+BAfM,WAAyBP,OAA6B;IAC3D,IAAI,CAACf,gBAAgB,CAACsB,SAAS,EAAE;MAC/B,MAAM,IAAIxB,mBAAmB,CAAC,cAAc,EAAE,WAAW,CAAC;;IAG5DW,QAAQ,GAAGK,eAAe,CAACC,OAAO,IAAIN,QAAQ,IAAI,EAAE,CAAC;IAErD,IAAMwB,eAAe,SAASH,0BAA0B,EAAE;IAC1D,IAAI,CAACG,eAAe,EAAE;MACpB;;IAGFzB,eAAe,GAAGR,gBAAgB,CAACsB,SAAS,CAACb,QAAQ,IAAI,EAAE,CAAC;IAE5D,OAAOD,eAAe;EACxB,CAAC;EAAA;AAAA;AAGD,gBAAsB0B,eAAe;EAAA;AAAA;AAGpC;EAAA,qCAHM,aAA8B;IACnC,IAAMC,IAAI,SAASC,mBAAmB,EAAE;IACxC,OAAOD,IAAI,IAAI,IAAI;EACrB,CAAC;EAAA;AAAA;AAGD,gBAAsBE,gBAAgB;EAAA;AAAA;AAErC;EAAA,sCAFM,aAA+B;IACpC,aAAarC,gBAAgB,CAACqC,gBAAgB,EAAE;EAClD,CAAC;EAAA;AAAA;AAGD,gBAAsBC,mBAAmB;EAAA;AAAA;AAexC;EAAA,yCAfM,aAAkC;IACvC,IAAMC,WAAW,SAASF,gBAAgB,EAAE;IAC5C,IAAIE,WAAW,EAAE;MACf,IAAI;QACF,IAAMC,IAAI,SAASjB,gBAAgB,CAAC,qBAAqB,CAAC;QAC1D,OAAOiB,IAAI;OACZ,CAAC,OAAOC,KAAK,EAAE;QAEd,IAAIA,KAAK,CAACC,IAAI,KAAKxC,MAAM,CAACyC,gBAAgB,EAAE;UAC1C,OAAO,IAAI;;QAEb,MAAMF,KAAK;;;IAGf,OAAO,IAAI;EACb,CAAC;EAAA;AAAA;AAGD,gBAAsBG,WAAW;EAAA;AAAA;AAUhC;EAAA,iCAVM,aAA0B;IAC/B,IAAI;MACF,IAAMT,IAAI,SAASZ,gBAAgB,CAAC,aAAa,CAAC;MAClD,OAAO;QAAEsB,IAAI,EAAE,SAAS;QAAEV,IAAI,EAAJA;MAAI,CAAE;KACjC,CAAC,OAAOM,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,IAAI,KAAKxC,MAAM,CAAC4C,iBAAiB,EAAE;QAC3C,OAAO;UAAED,IAAI,EAAE,QAAQ;UAAEV,IAAI,EAAE;QAAI,CAAE;;MAEvC,MAAMM,KAAK;;EAEf,CAAC;EAAA;AAAA;AAGD,gBAAsBM,YAAY;EAAA;AAAA;AAEjC;EAAA,kCAFM,aAA2B;IAChC,MAAMxB,gBAAgB,CAAC,cAAc,CAAC;EACxC,CAAC;EAAA;AAAA;AAGD,gBAAsByB,eAAe;EAAA;AAAA;AAEpC;EAAA,qCAFM,aAA8B;IACnC,MAAMzB,gBAAgB,CAAC,iBAAiB,CAAC;EAC3C,CAAC;EAAA;AAAA;AAGD,gBAAsBa,mBAAmB;EAAA;AAAA;AAExC;EAAA,yCAFM,aAAkC;IACvC,aAAab,gBAAgB,CAAC,qBAAqB,CAAC;EACtD,CAAC;EAAA;AAAA;AAGD,gBAAsB0B,aAAa;EAAA;AAAA;AAOlC;EAAA,mCAPM,aAA+C;IAAA,IAAlBC,2EAAe,GAAG;IACpD,IAAI,CAAClD,gBAAgB,CAACiD,aAAa,EAAE;MACnC,MAAM,IAAInD,mBAAmB,CAAC,cAAc,EAAE,eAAe,CAAC;;IAGhE,MAAMuB,8BAA8B,EAAE;IACtC,aAAarB,gBAAgB,CAACiD,aAAa,CAACC,IAAI,CAAC;EACnD,CAAC;EAAA;AAAA;AAGD,SAASC,OAAO,IAAIC,cAAc;AAElC,SAASD,OAAO,IAAIE,oBAAoB;AAExC,SAASF,OAAO,IAAIG,cAAc;AAElC,SAASH,OAAO,IAAIlD,UAAU","names":["Constants","UnavailabilityError","invariant","ExpoGoogleSignIn","GoogleUser","ERRORS","SCOPES","TYPES","DEFAULT_SCOPES","PROFILE","EMAIL","_initialization","_options","_currentUser","_isClientUsageEnabled","setCurrentUser","currentUser","validateOptions","options","scopes","isOfflineEnabled","webClientId","validateOwnership","appOwnership","ensureGoogleIsInitializedAsync","initAsync","invokeAuthMethod","method","payload","account","allowInClient","getCurrentUser","askForPlayServicesAsync","getPlayServiceAvailability","shouldAsk","arePlayServicesAvailableAsync","hasPlayServices","isSignedInAsync","user","getCurrentUserAsync","isConnectedAsync","signInSilentlyAsync","isConnected","auth","error","code","SIGN_IN_REQUIRED","signInAsync","type","SIGN_IN_CANCELLED","signOutAsync","disconnectAsync","getPhotoAsync","size","default","GoogleAuthData","GoogleAuthentication","GoogleIdentity"],"sourceRoot":"","sources":["../src/GoogleSignIn.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExpoGoogleSignIn from './ExpoGoogleSignIn';\nimport { GoogleSignInOptions, GoogleSignInAuthResult } from './GoogleSignIn.types';\nimport GoogleUser from './GoogleUser';\n\nexport const {\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  ERRORS,\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  SCOPES,\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  TYPES,\n} = ExpoGoogleSignIn;\n\nconst DEFAULT_SCOPES = [SCOPES.PROFILE, SCOPES.EMAIL];\n\nlet _initialization: Promise<void>;\nlet _options: GoogleSignInOptions;\nlet _currentUser: GoogleUser | null = null;\nlet _isClientUsageEnabled = false;\n\nfunction setCurrentUser(currentUser: GoogleUser | null): GoogleUser | null {\n  _currentUser = currentUser;\n  return _currentUser;\n}\n\nfunction validateOptions(options?: GoogleSignInOptions): GoogleSignInOptions {\n  if (!options) {\n    return {\n      scopes: DEFAULT_SCOPES,\n    };\n  }\n  if (options.isOfflineEnabled) {\n    invariant(\n      typeof options.webClientId === 'string' && options.webClientId !== '',\n      'GoogleSignIn: Offline access (isOfflineEnabled: true) requires a valid google server id `webClientId`'\n    );\n  }\n\n  return {\n    ...options,\n    scopes: options.scopes || DEFAULT_SCOPES,\n  };\n}\n\nfunction validateOwnership() {\n  invariant(\n    _isClientUsageEnabled || Constants.appOwnership !== 'expo',\n    'expo-google-sign-in is not supported in the Expo Client because a custom URL scheme is required at build time. Please refer to the docs for usage outside of Expo www.npmjs.com/package/expo-google-sign-in'\n  );\n}\n\nasync function ensureGoogleIsInitializedAsync(options?: GoogleSignInOptions): Promise<any> {\n  if (_initialization == null) {\n    return initAsync(options);\n  }\n  return _initialization;\n}\n\nasync function invokeAuthMethod(method: string): Promise<GoogleUser | null> {\n  if (!ExpoGoogleSignIn[method]) {\n    throw new UnavailabilityError('GoogleSignIn', method);\n  }\n  await ensureGoogleIsInitializedAsync();\n  const payload = await ExpoGoogleSignIn[method]();\n  const account = payload != null ? new GoogleUser(payload) : null;\n  return setCurrentUser(account);\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport function allowInClient() {\n  _isClientUsageEnabled = true;\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport function getCurrentUser(): GoogleUser | null {\n  return _currentUser;\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function askForPlayServicesAsync(): Promise<boolean> {\n  return await getPlayServiceAvailability(true);\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function getPlayServiceAvailability(shouldAsk: boolean = false): Promise<boolean> {\n  validateOwnership();\n\n  if (ExpoGoogleSignIn.arePlayServicesAvailableAsync) {\n    return await ExpoGoogleSignIn.arePlayServicesAvailableAsync(shouldAsk);\n  } else {\n    return true;\n  }\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function initAsync(options?: GoogleSignInOptions): Promise<void> {\n  if (!ExpoGoogleSignIn.initAsync) {\n    throw new UnavailabilityError('GoogleSignIn', 'initAsync');\n  }\n\n  _options = validateOptions(options || _options || {});\n\n  const hasPlayServices = await getPlayServiceAvailability();\n  if (!hasPlayServices) {\n    return;\n  }\n\n  _initialization = ExpoGoogleSignIn.initAsync(_options || {});\n\n  return _initialization;\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function isSignedInAsync(): Promise<boolean> {\n  const user = await getCurrentUserAsync();\n  return user != null;\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function isConnectedAsync(): Promise<boolean> {\n  return await ExpoGoogleSignIn.isConnectedAsync();\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function signInSilentlyAsync(): Promise<GoogleUser | null> {\n  const isConnected = await isConnectedAsync();\n  if (isConnected) {\n    try {\n      const auth = await invokeAuthMethod('signInSilentlyAsync');\n      return auth;\n    } catch (error) {\n      /* Return null to create parity with Android */\n      if (error.code === ERRORS.SIGN_IN_REQUIRED) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  return null;\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function signInAsync(): Promise<GoogleSignInAuthResult> {\n  try {\n    const user = await invokeAuthMethod('signInAsync');\n    return { type: 'success', user };\n  } catch (error) {\n    if (error.code === ERRORS.SIGN_IN_CANCELLED) {\n      return { type: 'cancel', user: null };\n    }\n    throw error;\n  }\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function signOutAsync(): Promise<void> {\n  await invokeAuthMethod('signOutAsync');\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function disconnectAsync(): Promise<void> {\n  await invokeAuthMethod('disconnectAsync');\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function getCurrentUserAsync(): Promise<GoogleUser | null> {\n  return await invokeAuthMethod('getCurrentUserAsync');\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport async function getPhotoAsync(size: number = 128): Promise<string | null> {\n  if (!ExpoGoogleSignIn.getPhotoAsync) {\n    throw new UnavailabilityError('GoogleSignIn', 'getPhotoAsync');\n  }\n\n  await ensureGoogleIsInitializedAsync();\n  return await ExpoGoogleSignIn.getPhotoAsync(size);\n}\n\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport { default as GoogleAuthData } from './GoogleAuthData';\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport { default as GoogleAuthentication } from './GoogleAuthentication';\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport { default as GoogleIdentity } from './GoogleIdentity';\n/** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\nexport { default as GoogleUser } from './GoogleUser';\n\nexport {\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  GoogleSignInType,\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  GoogleSignInOptions,\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  GoogleSignInAuthResultType,\n  /** @deprecated `expo-google-sign-in` has been deprecated in favor of `expo-auth-session` and `@react-native-google-signin/google-signin` (development clients). */\n  GoogleSignInAuthResult,\n} from './GoogleSignIn.types';\n"]},"metadata":{},"sourceType":"module"}