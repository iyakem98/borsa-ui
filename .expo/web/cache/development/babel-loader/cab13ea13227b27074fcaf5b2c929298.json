{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ChatListItem from \"./src/components/Chats/ChatListItem\";\nimport ChatScreen from \"./src/screens/ChatScreen\";\nimport MessagingScreen from \"./src/screens/MessagingScreen\";\nimport Navigator from \"./src/navigation/Navigator\";\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { store, persistor } from \"./src/app/store\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport ChatProvider, { ChatState } from \"./src/context/ChatProvider\";\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { UpdateLastSeenAndStatus } from \"./src/features/auth/authSlice\";\nimport { fetchChat } from \"./src/features/chat/chatSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction AppContainer() {\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var dispatch = useDispatch();\n  var appState = useRef(AppState.currentState);\n  var _useState = useState(\"online\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    online = _useState2[0],\n    setOnline = _useState2[1];\n  var _useState3 = useState(\"away\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    away = _useState4[0],\n    setAway = _useState4[1];\n  var _useState5 = useState(appState.current),\n    _useState6 = _slicedToArray(_useState5, 2),\n    appStateVisible = _useState6[0],\n    setAppStateVisible = _useState6[1];\n  var _ChatState = ChatState(),\n    date = _ChatState.date,\n    setDate = _ChatState.setDate;\n  var datte = moment();\n  useEffect(function () {\n    var subscription = AppState.addEventListener('change', function (nextAppState) {\n      console.log(nextAppState);\n      if (nextAppState === 'background') {\n        if (user != null) {\n          sendData(away, user._id);\n        }\n      }\n      if (nextAppState === 'active') {\n        if (user != null) {\n          sendData(online, user._id);\n        }\n      }\n    });\n    return function () {\n      subscription.remove();\n    };\n  }, []);\n  var sendData = function sendData(online, userId) {\n    var userData = {\n      status: online,\n      userId: user._id\n    };\n    console.log(userData);\n    dispatch(UpdateLastSeenAndStatus(userData));\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Navigator, {})\n  });\n}\n{}\nexport default AppContainer;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f9f8fc',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["ChatListItem","ChatScreen","MessagingScreen","Navigator","Provider","useDispatch","useSelector","store","persistor","PersistGate","ChatProvider","ChatState","useEffect","useState","useRef","moment","axios","UpdateLastSeenAndStatus","fetchChat","AppContainer","state","auth","user","dispatch","appState","AppState","currentState","online","setOnline","away","setAway","current","appStateVisible","setAppStateVisible","date","setDate","datte","subscription","addEventListener","nextAppState","console","log","sendData","_id","remove","userId","userData","status","styles","container","StyleSheet","create","flex","backgroundColor","justifyContent"],"sources":["/home/dagmawi/personal/borsa/myborsa/borsa-ui/AppContainer.js"],"sourcesContent":["// import { StatusBar } from 'expo-status-bar';\nimport {AppState, StyleSheet, Text, View } from 'react-native';\nimport ChatListItem from './src/components/Chats/ChatListItem';\nimport ChatScreen from './src/screens/ChatScreen';\nimport MessagingScreen from './src/screens/MessagingScreen';\nimport Navigator from './src/navigation/Navigator';\nimport { Provider,  useDispatch,  useSelector } from 'react-redux';\nimport { store, persistor } from './src/app/store';\nimport {PersistGate} from 'redux-persist/integration/react';  \nimport ChatProvider, { ChatState } from './src/context/ChatProvider';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { UpdateLastSeenAndStatus } from './src/features/auth/authSlice';\nimport { fetchChat } from './src/features/chat/chatSlice';\n\n\nfunction AppContainer() {\n  \n    const { user } = useSelector((state) => state.auth)\n    const dispatch = useDispatch()\n    const appState = useRef(AppState.currentState);\n    const [online, setOnline] = useState(\"online\")\n    const [away, setAway] = useState(\"away\")\n    // console.log(user)\n  const [appStateVisible, setAppStateVisible] = useState(appState.current);\n  // console.log(user)\n  const {date, setDate} = ChatState()\n  const datte  = moment()\n  useEffect(() => {\n    const subscription = AppState.addEventListener('change', nextAppState => {\n      console.log(nextAppState)\n      // if (\n      //   appState.current.match(/inactive|background/) &&\n      //   nextAppState === 'active'\n      // ) {\n      //   console.log('App has come to the foreground!');\n      // }\n    //   if(appState.current.match(/background/) &&\n    //   nextAppState === 'background'){\n    //     console.log('display that the user is away')\n    //   }\n    \n    if(nextAppState === 'background'){\n      if(user != null){\n        sendData(away, user._id)\n      }\n      \n      \n      // UpdateLastSeenAndStatus(away)\n      // const userData = {\n      //   status: away,\n      //   userId: user._id\n      // }\n      // console.log(userData)\n      // dispatch(UpdateLastSeenAndStatus(userData))\n    }\n    if(nextAppState === 'active'){\n      // UpdateLastSeenAndStatus(online)\n      if(user != null){\n        sendData(online, user._id)\n      }\n      \n      // const userData = {\n      //   status: online,\n      //   userId: user._id\n      // }\n      // console.log(userData)\n      // dispatch(UpdateLastSeenAndStatus(userData))\n    }\n    // else if(nextAppState === 'active'){\n    //   console.log('return user to online status')\n    // }\n    // console.log(user)\n    //   appState.current = nextAppState;\n    //   setAppStateVisible(appState.current);\n    //   console.log('AppState', appState.current);\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n  const sendData = (online, userId) => {\n    // console.log(online)\n    // console.log(userId)\n    const userData = {\n        status: online,\n        userId: user._id\n      }\n      console.log(userData)\n          dispatch(UpdateLastSeenAndStatus(userData))\n          // dispatch(fetchChat())\n\n  }\n  // // const UpdateLastSeenAndStatus = async(status) =>{\n  // //   try{\n\n    \n  // //   const   config = {\n        \n  // //     headers: {\n       \n  // //       Authorization: `Bearer ${user.token}`\n  // //     },\n  // //     // body: JSON.stringify({\n  // //     //   imgsource: newPhoto.base64,\n  // //     // }),\n  // //     // body: formData\n  // //    };\n  // //    const now = moment()\n  // //    const UpdatedLastSeen = now.format()\n  // //    const {data} = await axios.put('http://192.168.100.2:5000/api/users/stat', {\n  // //     userId : user._id,\n  // //     status: status,\n  // //     lastSeen : UpdatedLastSeen\n      \n      \n  // //   },\n  // //   config)\n  // //   console.log('user status and last seen are updated')\n  // // }\n  // // catch(error){\n  // //   console.log(error)\n  // // }\n     \n\n  // }\n  return (\n   \n \n  //  <PersistGate loading={null} persistor={persistor}>\n   <View style={styles.container}>\n     <Navigator/>\n     {/* <StatusBar style=\"auto\" /> */}\n   </View>\n    // </PersistGate>\n    \n\n\n \n \n  )\n}\n\n{/* <View>\n    <Text>ete</Text>\n</View>  */}\n\nexport default AppContainer\n\nconst styles = StyleSheet.create({\n    // \"proxy\": \"http://192.168.100.2:5002/\",\n    container: {\n      flex: 1,\n      backgroundColor: '#f9f8fc',\n      justifyContent: 'center',\n      \n    },\n  });"],"mappings":";;;;;AAEA,OAAOA,YAAY;AACnB,OAAOC,UAAU;AACjB,OAAOC,eAAe;AACtB,OAAOC,SAAS;AAChB,SAASC,QAAQ,EAAGC,WAAW,EAAGC,WAAW,QAAQ,aAAa;AAClE,SAASC,KAAK,EAAEC,SAAS;AACzB,SAAQC,WAAW,QAAO,iCAAiC;AAC3D,OAAOC,YAAY,IAAIC,SAAS;AAChC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,QAAQ,OAAO;AAC9B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,uBAAuB;AAChC,SAASC,SAAS;AAAwC;AAG1D,SAASC,YAAY,GAAG;EAEpB,mBAAiBb,WAAW,CAAC,UAACc,KAAK;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAA3CC,IAAI,gBAAJA,IAAI;EACZ,IAAMC,QAAQ,GAAGlB,WAAW,EAAE;EAC9B,IAAMmB,QAAQ,GAAGV,MAAM,CAACW,QAAQ,CAACC,YAAY,CAAC;EAC9C,gBAA4Bb,QAAQ,CAAC,QAAQ,CAAC;IAAA;IAAvCc,MAAM;IAAEC,SAAS;EACxB,iBAAwBf,QAAQ,CAAC,MAAM,CAAC;IAAA;IAAjCgB,IAAI;IAAEC,OAAO;EAEtB,iBAA8CjB,QAAQ,CAACW,QAAQ,CAACO,OAAO,CAAC;IAAA;IAAjEC,eAAe;IAAEC,kBAAkB;EAE1C,iBAAwBtB,SAAS,EAAE;IAA5BuB,IAAI,cAAJA,IAAI;IAAEC,OAAO,cAAPA,OAAO;EACpB,IAAMC,KAAK,GAAIrB,MAAM,EAAE;EACvBH,SAAS,CAAC,YAAM;IACd,IAAMyB,YAAY,GAAGZ,QAAQ,CAACa,gBAAgB,CAAC,QAAQ,EAAE,UAAAC,YAAY,EAAI;MACvEC,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;MAY3B,IAAGA,YAAY,KAAK,YAAY,EAAC;QAC/B,IAAGjB,IAAI,IAAI,IAAI,EAAC;UACdoB,QAAQ,CAACb,IAAI,EAAEP,IAAI,CAACqB,GAAG,CAAC;QAC1B;MAUF;MACA,IAAGJ,YAAY,KAAK,QAAQ,EAAC;QAE3B,IAAGjB,IAAI,IAAI,IAAI,EAAC;UACdoB,QAAQ,CAACf,MAAM,EAAEL,IAAI,CAACqB,GAAG,CAAC;QAC5B;MAQF;IAQA,CAAC,CAAC;IAEF,OAAO,YAAM;MACXN,YAAY,CAACO,MAAM,EAAE;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,IAAMF,QAAQ,GAAG,SAAXA,QAAQ,CAAIf,MAAM,EAAEkB,MAAM,EAAK;IAGnC,IAAMC,QAAQ,GAAG;MACbC,MAAM,EAAEpB,MAAM;MACdkB,MAAM,EAAEvB,IAAI,CAACqB;IACf,CAAC;IACDH,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;IACjBvB,QAAQ,CAACN,uBAAuB,CAAC6B,QAAQ,CAAC,CAAC;EAGnD,CAAC;EAkCD,OAIC,KAAC,IAAI;IAAC,KAAK,EAAEE,MAAM,CAACC,SAAU;IAAA,UAC5B,KAAC,SAAS;EAAE,EAEP;AAQV;AAEA,CAEW;AAEX,eAAe9B,YAAY;AAE3B,IAAM6B,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAE7BF,SAAS,EAAE;IACTG,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,cAAc,EAAE;EAElB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}