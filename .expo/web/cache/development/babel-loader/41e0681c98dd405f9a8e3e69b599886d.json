{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nvar API_URL = 'http://192.168.100.2:5000/api/message/';\nvar fetchMessages = function () {\n  var _ref = _asyncToGenerator(function* (selectedChat, user, setLd, setMessages, socket) {\n    if (!selectedChat) {\n      return;\n    }\n    var config = {\n      headers: {\n        Authorization: \"Bearer \" + user.token\n      }\n    };\n    setLd(true);\n    console.log('fetching in messageService');\n    var _yield$axios$get = yield axios.get(\"/api/message/\" + selectedChat._id, config),\n      data = _yield$axios$get.data;\n    setMessages(data);\n    setLd(false);\n    socket.emit('join chat', selectedChat._id);\n  });\n  return function fetchMessages(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar sendMess = function () {\n  var _ref2 = _asyncToGenerator(function* (event, newMessage, socket, selectedChat, user, setNewMessage, setMessages, messages) {\n    event.preventDefault();\n    if (newMessage) {\n      socket.emit('stop typing', selectedChat._id);\n      var config = {\n        headers: {\n          Authorization: \"Bearer \" + user.token\n        }\n      };\n      setNewMessage(\"\");\n      var _yield$axios$post = yield axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config),\n        data = _yield$axios$post.data;\n      socket.emit('new message', data);\n      setMessages([].concat(_toConsumableArray(messages), [data]));\n    }\n  });\n  return function sendMess(_x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar sendMessage = function () {\n  var _ref3 = _asyncToGenerator(function* (content, chatId, token) {\n    var config = {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    };\n    var response = axios.post(API_URL, content, chatId, config);\n    console.log(response);\n    return response.data;\n  });\n  return function sendMessage(_x14, _x15, _x16) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar allMessages = function () {\n  var _ref4 = _asyncToGenerator(function* (chatId) {\n    var user1 = yield AsyncStorage.getItem('user');\n    var user = JSON.parse(user1);\n    var config = {\n      headers: {\n        Authorization: \"Bearer \" + user.token\n      }\n    };\n    console.log('fetchin in messageService');\n    var response = yield axios.get(API_URL + chatId, config);\n    return response.data;\n  });\n  return function allMessages(_x17) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar messageService = {\n  sendMessage: sendMessage,\n  allMessages: allMessages,\n  fetchMessages: fetchMessages,\n  sendMess: sendMess\n};\nexport default messageService;","map":{"version":3,"names":["AsyncStorage","axios","API_URL","fetchMessages","selectedChat","user","setLd","setMessages","socket","config","headers","Authorization","token","console","log","get","_id","data","emit","sendMess","event","newMessage","setNewMessage","messages","preventDefault","post","content","chatId","sendMessage","response","allMessages","user1","getItem","JSON","parse","messageService"],"sources":["/home/dagmawi/personal/borsa/ui/borsa-ui/src/features/message/messageService.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios'\n\nconst API_URL = 'http://192.168.100.2:5000/api/message/'\nconst fetchMessages = async(selectedChat, user, setLd, setMessages, socket) =>{\n  if (!selectedChat){\n    return\n}\n// try{\n  const config = {\n    headers: {\n       /* \"Content-type\": \"application/json\", */\n        // Authorization: `Bearer ${user.token}`,\n        Authorization: `Bearer ${user.token}`,\n    },\n    };\n\n    setLd(true)\n    console.log('fetching in messageService')\n    const { data } = await axios.get(\n    `/api/message/${selectedChat._id}`,\n    config)\n    setMessages(data);\n    setLd(false)\n\n   socket.emit('join chat', selectedChat._id)\n    // }\n  \n    // catch (error) {\n    //           throw new Error(error)\n    //       }\n    \n\n}\n\n\nconst sendMess = async(event, newMessage, socket, selectedChat, user, setNewMessage, setMessages,  messages) => {\n  event.preventDefault()\n  if (newMessage) {\n    // try {\n      socket.emit('stop typing', selectedChat._id)\n      const config = {\n      headers: {\n         /* \"Content-type\": \"application/json\", */\n          Authorization: `Bearer ${user.token}`,\n      },\n      };\n      setNewMessage(\"\");\n      const { data } = await axios.post(\n      \"/api/message\",\n      {\n          content: newMessage,\n          chatId: selectedChat._id,\n      \n      },\n      config\n   );\n\n  socket.emit('new message', data)\n  setMessages([...messages, data]);\n      \n  // } catch (error) {\n  //     throw new Error(error)\n  // }\n  }\n}\n\n\nconst sendMessage = async(content, chatId, token) => {\n    const config = {\n        headers: {\n            Authorization: `Bearer ${token}`\n\n        }\n    }\n\n    /*content = content\n    chatId = chatId\n\n    console.log(chatId)\n    console.log(content) */\n\n\n    const response = axios.post(API_URL, content, chatId, config)\n\n    console.log(response)\n    \n\n    return response.data \n}\n\n\nconst allMessages = async (chatId) => {\n  const user1 = await  AsyncStorage.getItem('user')\n  const user = JSON.parse(user1)\n    const config = {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    }\n    \n    console.log('fetchin in messageService')\n    const response = await axios.get(API_URL + chatId , config)\n  \n    return response.data\n  }\n\nconst messageService = {\n    sendMessage,\n    allMessages,\n    fetchMessages,\n    sendMess\n}\n\n\nexport default messageService"],"mappings":"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"},"metadata":{},"sourceType":"module"}