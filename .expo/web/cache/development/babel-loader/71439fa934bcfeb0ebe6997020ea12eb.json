{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getSender, getSenderFull } from \"../ChatConfig/ChatLogics\";\nimport ChatListItem from \"../components/Chats/ChatListItem\";\nimport { ChatState } from \"../context/ChatProvider\";\nimport { fetchChat } from \"../features/chat/chatSlice\";\nimport io from 'socket.io-client';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Test = function Test() {\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    users = _useState2[0],\n    setUsers = _useState2[1];\n  var ENDPOINT = \"http://192.168.100.2:5000\";\n  var socket = io(ENDPOINT);\n  var chatArr = [];\n  var usrArr = [];\n  var deletechat = null;\n  var _useSelector2 = useSelector(function (state) {\n      return state.chat;\n    }),\n    chattts = _useSelector2.chattts,\n    selllectedChat = _useSelector2.selllectedChat,\n    isLoading = _useSelector2.isLoading,\n    isError = _useSelector2.isError,\n    message = _useSelector2.message;\n  var _useSelector3 = useSelector(function (state) {\n      return state.mess;\n    }),\n    messages = _useSelector3.messages;\n  var _ChatState = ChatState(),\n    selectedChat = _ChatState.selectedChat,\n    setSelectedChat = _ChatState.setSelectedChat,\n    chats = _ChatState.chats,\n    setChats = _ChatState.setChats,\n    chatSelected = _ChatState.chatSelected,\n    setchatSelected = _ChatState.setchatSelected,\n    fetchAgain = _ChatState.fetchAgain,\n    setfetchAgain = _ChatState.setfetchAgain,\n    notification = _ChatState.notification,\n    setNotification = _ChatState.setNotification,\n    receivedMessage = _ChatState.receivedMessage,\n    setreceivedMessage = _ChatState.setreceivedMessage,\n    sentMessage = _ChatState.sentMessage,\n    setsentMessage = _ChatState.setsentMessage,\n    messageSentOrReceived = _ChatState.messageSentOrReceived,\n    setmessageSentOrReceived = _ChatState.setmessageSentOrReceived;\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    socketConnected = _useState4[0],\n    setsocketConnected = _useState4[1];\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    userss = _useState6[0],\n    setUserss = _useState6[1];\n  useEffect(function () {}, []);\n  useEffect(function () {\n    socket.emit('chat_users', {\n      userID: user._id,\n      chatData: chatArr,\n      usrData: usrArr\n    });\n  }, []);\n  useEffect(function () {\n    socket.on('activatedUser', function (data) {\n      return setUserss(data);\n    });\n    console.log(userss);\n  }, []);\n  useEffect(function () {\n    dispatch(fetchChat());\n  }, []);\n  var deleteChatt = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var user1 = yield AsyncStorage.getItem(\"user\");\n      var user = JSON.parse(user1);\n      try {\n        var res = yield axios.get('http://192.168.100.2:5000/api/chat/clean');\n        console.log(res);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n    return function deleteChatt() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {}, []);\n  return _jsxs(View, {\n    style: styles.con,\n    children: [_jsx(Text, {\n      children: \"List of active users(id) in each chat \"\n    }), chattts && chattts.length > 0 ? chattts.map(function (chat) {\n      if (chat != null) {\n        chatArr.push(chat);\n        if (chat.latestMessage != null) {\n          return _jsx(Text, {\n            children: \" chat is not deleted \"\n          });\n        } else {\n          return _jsx(Text, {\n            children: \" chat is  deleted \"\n          });\n        }\n      }\n    }) : _jsx(Text, {\n      children: \"no available chats\"\n    })]\n  });\n};\nexport default Test;\nvar styles = StyleSheet.create({\n  con: {\n    marginTop: 200,\n    borderRadius: 15\n  },\n  Tex: {\n    fontSize: 20,\n    textAlign: 'center',\n    color: '#black',\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    marginTop: 200\n  }\n});","map":{"version":3,"names":["axios","React","useEffect","useRef","useState","useDispatch","useSelector","getSender","getSenderFull","ChatListItem","ChatState","fetchChat","io","AsyncStorage","Test","dispatch","state","auth","user","users","setUsers","ENDPOINT","socket","chatArr","usrArr","deletechat","chat","chattts","selllectedChat","isLoading","isError","message","mess","messages","selectedChat","setSelectedChat","chats","setChats","chatSelected","setchatSelected","fetchAgain","setfetchAgain","notification","setNotification","receivedMessage","setreceivedMessage","sentMessage","setsentMessage","messageSentOrReceived","setmessageSentOrReceived","socketConnected","setsocketConnected","userss","setUserss","emit","userID","_id","chatData","usrData","on","data","console","log","deleteChatt","user1","getItem","JSON","parse","res","get","err","styles","con","length","map","push","latestMessage","StyleSheet","create","marginTop","borderRadius","Tex","fontSize","textAlign","color","textTransform","fontWeight"],"sources":["/home/dagmawi/personal/borsa/ui/borsa-ui/src/screens/Test.js"],"sourcesContent":["import axios from 'axios'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FlatList, StyleSheet, Text, View } from 'react-native'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getSender, getSenderFull } from '../ChatConfig/ChatLogics'\nimport ChatListItem from '../components/Chats/ChatListItem'\nimport { ChatState } from '../context/ChatProvider'\nimport {  fetchChat } from '../features/chat/chatSlice'\nimport io from 'socket.io-client'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n\nconst Test = () => {\n    const dispatch = useDispatch()\n    const { user } = useSelector((state) => state.auth)\n    // const { selectedChat, setSelectedChat, chats, setChats } = ChatState();\n    // const {chattts, isLoading, isError, message} = useSelector((state) => state.chat)\n    // const {messages} = useSelector((state) => state.mess)\n    const [users, setUsers] = useState([]);\n    const ENDPOINT = \"http://192.168.100.2:5000\"\n    var  socket = io(ENDPOINT)\n    const chatArr = []\n    const usrArr = []\n    var deletechat = null\n    const {chattts, selllectedChat,  isLoading, isError, message} = useSelector((state) => state.chat)\n    const {messages} = useSelector((state) => state.mess)\n    const {\n            selectedChat, setSelectedChat, \n            chats, setChats, \n            chatSelected, setchatSelected, \n            fetchAgain, setfetchAgain, \n            notification, setNotification,\n            receivedMessage, setreceivedMessage,\n            sentMessage, setsentMessage,\n            messageSentOrReceived, setmessageSentOrReceived,\n            // onlineStatus, setonlineStatus\n            } = ChatState();\n    const [socketConnected, setsocketConnected] = useState(false)\n    const [userss, setUserss] = useState({})\n\n    \n    useEffect(()=> {\n      \n      // socket.on('usersResponse', (data) => setUsers(data));\n      // console.log(users)\n    }, [])\n    useEffect(()=> {\n      socket.emit('chat_users', {userID : user._id, chatData: chatArr, usrData: usrArr})\n      \n      // socket.on('usersResponse', (data) => setUsers(data));\n      // console.log(chatArr)\n    }, [])\n    useEffect(()=> {\n      socket.on('activatedUser', (data) => setUserss(data))\n      console.log(userss)\n      \n      // socket.on('usersResponse', (data) => setUsers(data));\n      // console.log(chatArr)\n    }, [])\n    // const getUserChat = async() => {\n    //   try{\n    //   const config = {\n    //     headers: {\n    //       Authorization: `Bearer ${user.token}`,\n    //     },\n    //   }\n    //   // const res = await  axios.get('http://192.168.100.2:5002/api/chat/', config);\n    //   const {data} = await  axios.get('http://192.168.100.2:5000/api/chat/', config);\n    //   console.log(data) \n    //   setChats(data)\n    //   // return res.data\n    // }\n    // catch(error){\n    //   console.log(\"stupid error\")\n    // }\n    // }\n   \n    useEffect(() => {\n      \n        // if (isError) {\n        //   console.log(message)\n        // }\n        // if(trId)\n        // console.log(dispatch(accessChat({trId}, user.token)))\n      \n       \n      // setChats(dispatch(fetchChat()))\n      // console.log(dispatch(fetchChat()))\n      // getUserChat(user.token)\n      // getUserChat(user.token)\n      \n      // getUserChat()\n      // console.log(chats)\n      \n      dispatch(fetchChat())\n      \n      // console.log(chattts)\n     \n      // console.log(user)\n     \n\n      // console.log(user.token)\n     \n\n        // setSelectedChat('')\n        \n        \n    \n        // return () => {\n        //   dispatch(reset())\n        // }\n      },[])\n      const deleteChatt = async () => {\n        const user1 = await  AsyncStorage.getItem(\"user\")\n        const user = JSON.parse(user1)\n        try{\n          const res = await axios.get('http://192.168.100.2:5000/api/chat/clean')\n          console.log(res)\n        }\n        catch(err){\n          console.log(err)\n        }\n      \n        // try{\n        // //   const config = {\n        // //     headers: {\n        // //       'Content-Type': 'application/json',\n        // //       'Authorization': `Bearer ${user.token}`\n        // //   },      \n        // // }      \n        //     // headers: {\n        //     //   Authorization: `Bearer ${user.token}`,\n        //     // },\n            \n          \n        //   console.log(chatID)\n        //   // console.log('fetchin in chatService')\n        //   // const response = await axios.get(API_URL, config)\n          \n        //   // const response =  await axios.get(\"http://localhost:5000/api/chat/remove\", chatID, config)\n        //   // await axios.delete('http://192.168.100.2:5000/api/chat/remove', chatID, config)\n        //   // await axios.get('http://192.168.100.2:5000/api/chat/clean')\n        //   console.log(\"chat deleted\")\n        //   // console.log(response)\n        // }\n        // catch(err){\n        //   console.log(err)\n        // }\n          \n         \n        \n       \n        }\n      useEffect(() => {\n        // dispatch(deleteChat(deletechat))\n        // console.log(deletechat)\n        // deleteChatt()\n      },[])\n      \n   \n  return (\n   <View style={styles.con}>\n     {/* {chattts && <FlatList\n                data = {chattts} \n                key ={chattts._id}\n                renderItem = {({item}) => <ChatListItem chat = {item} \n            />}\n            />} */}\n            {/* <Text>testing users lists</Text> */}\n            <Text>List of active users(id) in each chat </Text>\n            {chattts && chattts.length > 0 ? chattts.map(chat => {\n                if(chat != null){\n                  chatArr.push(chat)\n                  if(chat.latestMessage != null ){\n                    return <Text> chat is not deleted </Text>\n                  }\n                  else{\n                    \n                    // deletechat =  chat._id\n                    return <Text> chat is  deleted </Text>\n                    // dispatch(deleteChat(chat._id))\n                    \n                  }\n                  \n                }\n              \n               \n               \n              //  if(chat.latestMessage !== null ){\n              //     return <Text> chat is not deleted </Text>\n              //   }\n              //   else{\n              //     return <Text> chat is deleted </Text>\n              //   }\n              // return <View>\n              //   {chat && chat.latestMessage ?( <Text>{chat.latestMessage.content} + {chat._id}</Text> ): ( <Text>chat deleted </Text> ) }\n              //   </View>\n              \n            \n                // else{\n                //   // dispatch(deleteChat(chat._id))\n                //   return  <Text> chat is deleted </Text>\n                // }\n            //  return  <View>\n            //  <View>\n            \n            //  </View>\n            //   </View>\n            \n                // return <View> \n                  \n                //   {chat.latestMessage &&  <Text>{chat.latestMessage.content}</Text>}\n                // </View>\n                \n        //    socket.on('chat_users', (chat._id, user._id))\n        //   return <Text>{chat._id}</Text>\n        //   { user && chat && socket.emit('chat_users', {userID : user._id, chatData: chat._id})\n        //   // socket.on('activatedUser', (data) => setUserss(data))\n        // }\n       \n          // console.log(userss)\n          // if(chat._id === userss.chatID){\n          //   return <Text>the chat with id = {userss.chatID} this means that the user with the id {userss.userID} is online\n          //   place online badge\n          //   </Text>\n          // }\n          // else{\n          //   return <Text>rest of the chat with id = {chat._id} are without active users and place offline badge</Text>\n          // }\n          \n          //  return <Text>{userss.userID}</Text>\n          }) : <Text>no available chats</Text>}\n            {/* { user && users.map((u) => (\n              \n              u.data._id === user._id ? <></> : <View>\n              <Text>{u.data.firstName + \" \" + u.data.lastName}</Text>\n            </View>\n               \n          ))} */}\n      {/* {chats && chats.map((chat) => (\n      <Text style={styles.Tex}>{chat._id}</Text>\n     )) } \n      <Text style={styles.Tex}>{test.chatName}</Text> */}\n           \n   </View>\n  )\n}\n\nexport default Test\n\nconst styles = StyleSheet.create({\n    con: {\n     \n    \n       \n        marginTop: 200,\n        borderRadius: 15,\n       \n      \n  },\n  Tex: {\n    fontSize: 20,\n    textAlign: 'center',\n    color: '#black',\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    marginTop: 200,\n},\n  \n  })"],"mappings":"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"},"metadata":{},"sourceType":"module"}