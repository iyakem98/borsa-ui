{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport ChatListItem from \"../components/Chats/ChatListItem\";\nimport { ChatState } from \"../context/ChatProvider\";\nimport { fetchChat, reset } from \"../features/chat/chatSlice\";\nimport { getSender, getSenderFull } from \"../ChatConfig/ChatLogics\";\nimport Test from \"./Test\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { allMessages } from \"../features/message/messageSlice\";\nimport { Avatar, Badge, Icon, withBadge } from '@rneui/themed';\nimport dayjs from 'dayjs';\nimport ChatListHeader from \"../components/Chats/ChatListItem/ChatListHeader\";\nimport { FontAwesome5, Ionicons } from '@expo/vector-icons';\nimport io from 'socket.io-client';\nimport { useRoute } from '@react-navigation/native';\nimport moment from 'moment/moment';\nimport { API_BASE_URL } from \"../utils/config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar ChatScreen = function ChatScreen() {\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  var appState = useRef(AppState.currentState);\n  var _useState = useState(appState.current),\n    _useState2 = _slicedToArray(_useState, 2),\n    appStateVisible = _useState2[0],\n    setAppStateVisible = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    onlineStatus = _useState4[0],\n    setonlineStatus = _useState4[1];\n  var _useSelector2 = useSelector(function (state) {\n      return state.chat;\n    }),\n    chattts = _useSelector2.chattts,\n    selllectedChat = _useSelector2.selllectedChat,\n    isLoading = _useSelector2.isLoading,\n    isError = _useSelector2.isError,\n    message = _useSelector2.message;\n  var _ChatState = ChatState(),\n    triggerChange = _ChatState.triggerChange,\n    settriggerChange = _ChatState.settriggerChange;\n  var _useSelector3 = useSelector(function (state) {\n      return state.mess;\n    }),\n    messages = _useSelector3.messages;\n  var _ChatState2 = ChatState(),\n    selectedChat = _ChatState2.selectedChat,\n    setSelectedChat = _ChatState2.setSelectedChat,\n    chats = _ChatState2.chats,\n    setChats = _ChatState2.setChats,\n    chatSelected = _ChatState2.chatSelected,\n    setchatSelected = _ChatState2.setchatSelected,\n    fetchAgain = _ChatState2.fetchAgain,\n    setfetchAgain = _ChatState2.setfetchAgain,\n    notification = _ChatState2.notification,\n    setNotification = _ChatState2.setNotification,\n    receivedMessage = _ChatState2.receivedMessage,\n    setreceivedMessage = _ChatState2.setreceivedMessage,\n    sentMessage = _ChatState2.sentMessage,\n    setsentMessage = _ChatState2.setsentMessage,\n    messageSentOrReceived = _ChatState2.messageSentOrReceived,\n    setmessageSentOrReceived = _ChatState2.setmessageSentOrReceived;\n  var navigation = useNavigation();\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    visible = _useState6[0],\n    setVisible = _useState6[1];\n  var ENDPOINT = \"http://192.168.100.2:5000\";\n  var formatted_date = null;\n  var socket = io(ENDPOINT);\n  var chatArr = [];\n  var chatArr2 = [];\n  var route = useRoute();\n  var _useState7 = useState({}),\n    _useState8 = _slicedToArray(_useState7, 2),\n    users = _useState8[0],\n    setUsers = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    socketConnected = _useState10[0],\n    setsocketConnected = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    storedNotifications = _useState12[0],\n    setstoredNotifications = _useState12[1];\n  var _useState13 = useState(),\n    _useState14 = _slicedToArray(_useState13, 2),\n    notifChat = _useState14[0],\n    setnotifChat = _useState14[1];\n  var openMenu = function openMenu() {\n    return setVisible(true);\n  };\n  var closeMenu = function closeMenu() {\n    return setVisible(false);\n  };\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    messageOnce = _useState16[0],\n    setmessageOnce = _useState16[1];\n  var goToMsg = function () {\n    var _ref = _asyncToGenerator(function* (chat) {\n      var userId = chat.users[0].id;\n      console.log(userId);\n    });\n    return function goToMsg(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    http: if (chatSelected == true) {\n      dispatch(fetchChat());\n      setchatSelected(false);\n    } else {\n      return;\n    }\n  });\n  useEffect(function () {\n    dispatch(fetchChat());\n  }, [fetchAgain]);\n  useEffect(function () {\n    console.log(route.name);\n  }, []);\n  useEffect(function () {\n    dispatch(fetchChat());\n  }, [user]);\n  useEffect(function () {}, []);\n  useEffect(function () {\n    {\n      user && socket.emit('chat_users', {\n        userID: user._id,\n        chatData: chatArr\n      });\n    }\n  }, []);\n  useEffect(function () {\n    socket.on('activatedUser', function (data) {\n      return setUsers(data);\n    });\n    setonlineStatus(users.onlineStatus);\n  }, []);\n  useEffect(function () {}, []);\n  var getNotif = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var notif = yield AsyncStorage.getItem('notification');\n      var notifChat = yield AsyncStorage.getItem('notifChat');\n      var parsedNotif = JSON.parse(notif);\n      var parsedChat = JSON.parse(notifChat);\n      setstoredNotifications(parsedNotif);\n      setnotifChat(parsedChat);\n    });\n    return function getNotif() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(_Fragment, {\n    children: _jsxs(ScrollView, {\n      style: {\n        backgroundColor: '#fff'\n      },\n      children: [_jsx(ChatListHeader, {\n        chatArr: chatArr2\n      }), _jsx(View, {\n        children: _jsx(Text, {\n          children: storedNotifications && storedNotifications.length ? \"\" : \"\"\n        })\n      }), chattts && chattts.length > 0 ? chattts.map(function (chat) {\n        if (chat != null) {\n          if (chat.lastestMessage !== null) {}\n          chatArr.push(chat);\n          chatArr2.push(chat);\n          setSelectedChat(chat);\n          if (chat._id === users.chatID && triggerChange) {\n            if (chat.latestMessage != null) {\n              return;\n              _jsxs(Pressable, {\n                onPress: function onPress() {\n                  {\n                    chat.latestMessage && chat.latestMessage.sender;\n                    if (chat.latestMessage.sender._id === user._id) {\n                      console.log(\"sender\");\n                      setsentMessage(true);\n                    } else if (chat.latestMessage.sender._id !== user._id) {\n                      console.log(\"reciever\");\n                      setsentMessage(false);\n                    } else {\n                      null;\n                    }\n                  }\n                  navigation.navigate('Messaging', {\n                    chatId: chat._id,\n                    userSelected: user != null ? getSenderFull(user, chat.users) : null\n                  });\n                },\n                style: styles.container,\n                children: [_jsxs(View, {\n                  children: [_jsx(Image, {\n                    source: {\n                      uri: user != null ? getSenderFull(user, chat.users).profilePic : null\n                    },\n                    style: styles.image\n                  }), onlineStatus && _jsx(Badge, {\n                    status: \"success\",\n                    containerStyle: {\n                      position: 'absolute',\n                      top: 50,\n                      left: 45\n                    }\n                  })]\n                }), _jsxs(View, {\n                  style: styles.content,\n                  children: [_jsxs(View, {\n                    style: styles.row,\n                    children: [_jsx(Text, {\n                      style: styles.name,\n                      children: user != null ? getSenderFull(user, chat.users).firstName : null\n                    }), _jsx(Text, {\n                      style: styles.subTitle,\n                      children: formatted_date\n                    })]\n                  }), chat.latestMessage && chat.latestMessage.content ? _jsxs(Text, {\n                    children: [\" \", chat.latestMessage.content]\n                  }) : _jsx(Text, {\n                    children: \"File Uploaded\"\n                  })]\n                })]\n              }, chat._id);\n            }\n          } else {\n            if (chat.latestMessage != null && triggerChange) {\n              return _jsxs(Pressable, {\n                style: styles.container,\n                onPress: function onPress() {\n                  return goToMsg(chat);\n                },\n                children: [_jsx(View, {\n                  children: _jsx(Image, {\n                    source: {\n                      uri: user != null ? getSenderFull(user, chat.users).profilePic : null\n                    },\n                    style: styles.image\n                  })\n                }), _jsxs(View, {\n                  style: styles.content,\n                  children: [_jsxs(View, {\n                    style: styles.row,\n                    children: [_jsx(Text, {\n                      style: styles.name,\n                      children: user != null ? getSenderFull(user, chat.users).firstName : null\n                    }), _jsx(Text, {\n                      style: styles.subTitle,\n                      children: formatted_date\n                    })]\n                  }), chat.latestMessage && chat.latestMessage.content != \"\" ? _jsx(View, {\n                    style: {\n                      flexDirection: 'row'\n                    },\n                    children: _jsx(Text, {\n                      numberOfLines: 2,\n                      style: styles.subTitle,\n                      children: chat.latestMessage.content\n                    })\n                  }) : _jsx(Text, {\n                    children: \"File Uploaded\"\n                  })]\n                })]\n              }, chat._id);\n            }\n          }\n        }\n      }) : _jsx(View, {\n        children: _jsx(Text, {\n          style: styles.text,\n          children: \"No chats available click here to access them \"\n        })\n      })]\n    })\n  });\n};\nexport default ChatScreen;\nvar styles = StyleSheet.create({\n  con: {\n    marginTop: 200,\n    borderRadius: 15\n  },\n  text: {\n    marginTop: 200\n  },\n  buttonStyle: {\n    backgroundColor: \"darkmagenta\",\n    height: 50,\n    marginBottom: 20,\n    justifyContent: \"center\",\n    marginHorizontal: 15,\n    borderRadius: 15\n  },\n  buttonText: {\n    fontSize: 20,\n    textAlign: 'center',\n    color: '#fff',\n    textTransform: 'uppercase',\n    fontWeight: 'bold'\n  },\n  container: {\n    flexDirection: 'row',\n    marginHorizontal: 10,\n    marginVertical: 5,\n    height: 70,\n    backgroundColor: '#fff'\n  },\n  image: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    marginRight: 10\n  },\n  content: {\n    flex: 1,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'lightgray'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  name: {\n    flex: 1,\n    fontWeight: 'bold',\n    fontSize: 16\n  },\n  subTitle: {\n    color: \"gray\",\n    marginTop: 2,\n    marginLeft: 2,\n    fontSize: 15\n  },\n  Tex: {\n    marginTop: 200\n  }\n});","map":{"version":3,"names":["useNavigation","axios","useEffect","useLayoutEffect","useRef","useState","useDispatch","useSelector","useStore","ChatListItem","ChatState","fetchChat","reset","getSender","getSenderFull","Test","AsyncStorage","allMessages","Avatar","Badge","Icon","withBadge","dayjs","ChatListHeader","FontAwesome5","Ionicons","io","useRoute","moment","API_BASE_URL","ChatScreen","dispatch","state","auth","user","appState","AppState","currentState","current","appStateVisible","setAppStateVisible","onlineStatus","setonlineStatus","chat","chattts","selllectedChat","isLoading","isError","message","triggerChange","settriggerChange","mess","messages","selectedChat","setSelectedChat","chats","setChats","chatSelected","setchatSelected","fetchAgain","setfetchAgain","notification","setNotification","receivedMessage","setreceivedMessage","sentMessage","setsentMessage","messageSentOrReceived","setmessageSentOrReceived","navigation","visible","setVisible","ENDPOINT","formatted_date","socket","chatArr","chatArr2","route","users","setUsers","socketConnected","setsocketConnected","storedNotifications","setstoredNotifications","notifChat","setnotifChat","openMenu","closeMenu","messageOnce","setmessageOnce","goToMsg","userId","id","console","log","http","name","emit","userID","_id","chatData","on","data","getNotif","notif","getItem","parsedNotif","JSON","parse","parsedChat","backgroundColor","length","map","lastestMessage","push","chatID","latestMessage","sender","navigate","chatId","userSelected","styles","container","uri","profilePic","image","position","top","left","content","row","firstName","subTitle","flexDirection","text","StyleSheet","create","con","marginTop","borderRadius","buttonStyle","height","marginBottom","justifyContent","marginHorizontal","buttonText","fontSize","textAlign","color","textTransform","fontWeight","marginVertical","width","marginRight","flex","borderBottomWidth","hairlineWidth","borderBottomColor","marginLeft","Tex"],"sources":["/home/dagmawi/personal/borsa/ui/borsa-ui/src/screens/ChatScreen.js"],"sourcesContent":["import { useNavigation } from '@react-navigation/native'\nimport axios from 'axios'\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react'\nimport {View, Text,FlatList, StyleSheet, Pressable, TouchableOpacity, Image, ScrollView, AppState} from 'react-native'\nimport { useDispatch, useSelector, useStore } from 'react-redux'\nimport ChatListItem from '../components/Chats/ChatListItem'\n// import ChatListHeader from '../components/Chats/ChatListItem/ChatListHeader'\nimport { ChatState } from '../context/ChatProvider'\nimport { fetchChat, reset } from '../features/chat/chatSlice'\nimport { getSender, getSenderFull } from '../ChatConfig/ChatLogics'\nimport Test from './Test'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n// import moment from 'moment'\nimport { allMessages } from '../features/message/messageSlice'\nimport {Avatar,  Badge, Icon, withBadge } from '@rneui/themed';\n// import { Badge } from '@rneui/themed';\nimport dayjs from 'dayjs'\nimport ChatListHeader from '../components/Chats/ChatListItem/ChatListHeader'\nimport { FontAwesome5, Ionicons } from '@expo/vector-icons';\nimport io from 'socket.io-client'\nimport { useRoute } from '@react-navigation/native'\nimport moment from 'moment/moment'\nimport { API_BASE_URL } from '../utils/config'\n\nconst ChatScreen = () => {\n   \n    const dispatch = useDispatch()\n    const { user } = useSelector((state) => state.auth)\n    const appState = useRef(AppState.currentState);\n  const [appStateVisible, setAppStateVisible] = useState(appState.current);\n    // const { onlineStatus } = useSelector((state) => state.auth)\n    const [onlineStatus, setonlineStatus] = useState(false)\n    const {chattts, selllectedChat,  isLoading, isError, message} = useSelector((state) => state.chat)\n    const {triggerChange, settriggerChange} = ChatState();\n    const {messages} = useSelector((state) => state.mess)\n    const {\n            selectedChat, setSelectedChat, \n            chats, setChats, \n            chatSelected, setchatSelected, \n            fetchAgain, setfetchAgain, \n            notification, setNotification,\n            receivedMessage, setreceivedMessage,\n            sentMessage, setsentMessage,\n            messageSentOrReceived, setmessageSentOrReceived,\n            // onlineStatus, setonlineStatus\n            } = ChatState();\n    const navigation = useNavigation();\n    const [visible, setVisible] = useState(false);\n    const ENDPOINT = \"http://192.168.100.2:5000\"\n    // var socket = useRef(null)\n    var formatted_date = null\n    var socket = io(ENDPOINT)\n    const chatArr = []\n    const chatArr2 = []\n    \n    const route = useRoute()\n    \n    const [users, setUsers] = useState({})\n    const [socketConnected, setsocketConnected] = useState(false)\n    const [storedNotifications, setstoredNotifications] = useState([])\n    const [notifChat, setnotifChat] = useState()\n    const openMenu = () => setVisible(true);\n    \n    const closeMenu = () => setVisible(false);\n\n    const [messageOnce, setmessageOnce] = useState(false)\n    // const renderChats = () => {\n    //   // dispatch(reset())\n    //   // console.log(chattts)\n    //   dispatch(fetchChat())\n    //   // console.log(chattts)\n    //   // console.log(chattts)\n    //  if(chattts.length < 0 || chattts.length == 0){\n    //   return <Text>chats are not available currently for the new user</Text>\n    //  }\n    //  else{\n    //   return <Text>chats are available currently for the new user</Text>\n    //  }\n    // }\n    // useEffect(() =>{\n    //   getNotif()\n    //   // console.log(notificationstored)\n    // }, [])\n\n    const goToMsg = async(chat) => {\n      const userId = chat.users[0].id\n      console.log(userId)\n      // // console.log(travelerId.current)\n      // try{\n      //     const config = {\n      //       headers: {\n      //           Authorization: `Bearer ${user.token}`\n      \n      //       }\n      //   }\n      //     const {data} = await axios.post(`${API_BASE_URL}chat`, {userId}, config)\n      //     // console.log(data._id)\n      //     setchatSelected(true)\n      \n      //     navigation.navigate('Messaging', {chatId: data._id, userSelected:\n          \n      //         user != null ? getSenderFull(user, data.users) : null })\n              \n      //     }\n      //     // return data\n          \n          \n      // catch(err){\n      //     console.log(err)\n      // }\n  }\n\n\n    useEffect(() => {\n     \n      \n      http://143.198.168.244/api/chat/\n      \n      \n        // if (isError) {\n        //   console.log(message)\n        // }\n        // if(trId)\n        // console.log(dispatch(accessChat({trId}, user.token)))\n       \n        // console.log(user)\n        // dispatch(fetchChat())\n        if(chatSelected== true){\n          dispatch(fetchChat())\n          setchatSelected(false)\n          \n        }\n        // renderChats()\n        else{\n         return\n          }  \n        // }\n        // }\n        \n        // console.log(chattts)\n        // console.log(user)\n      //   console.log('test')\n      //  console.log(selectedChat)\n      \n        \n \n        \n      })\nuseEffect(() =>{\n\n    dispatch(fetchChat())\n    \n  \n}, [fetchAgain])\nuseEffect(() =>{\n\n    console.log(route.name)\n    \n  \n}, [])\nuseEffect(() =>{\n\n    dispatch(fetchChat())\n    \n  \n}, [user])\n// useEffect(() =>{\n\n//   const subscription = AppState.addEventListener('change', nextAppState => {\n//     console.log(nextAppState)\n//     // if (\n//     //   appState.current.match(/inactive|background/) &&\n//     //   nextAppState === 'active'\n//     // ) {\n//     //   console.log('App has come to the foreground!');\n//     // }\n//   //   if(appState.current.match(/background/) &&\n//   //   nextAppState === 'background'){\n//   //     console.log('display that the user is away')\n//   //   }\n  \n//   if(nextAppState === 'background'){\n//     dispatch(fetchChat())\n//   }\n//   if(nextAppState === 'active'){\n//     dispatch(fetchChat())\n//   }\n//   // else if(nextAppState === 'active'){\n//   //   console.log('return user to online status')\n//   // }\n//   // console.log(user)\n//   //   appState.current = nextAppState;\n//   //   setAppStateVisible(appState.current);\n//   //   console.log('AppState', appState.current);\n//   });\n  \n\n//   return () => {\n//     subscription.remove();\n//   };\n    \n  \n// }, [])\n// useEffect(() =>{\n\n//     dispatch(fetchChat())\n    \n  \n// }, [AppState.currentState])\n// useEffect(() =>{\n//   dispatch(fetchChat())\n// }, [selectedChat])\n\n    \n// useEffect(() => {\n//   // setNotification(JSON.parse(getNotif))\n\n//   console.log(getNotif)\n// }, [])    \n\nuseEffect(() =>{\n  // navigation.addListener('focus', getNotif)\n  // getNotif()\n  // console.log(storedNotifications)\n}, [])\n\n\n// const renderChats = () => {\n//   dispatch(fetchChat())\n//   setSelectedChat(chattts)\n//   console.log(selectedChat)\n// }\n// const getNotif = async() =>{\n//   const notif  = await AsyncStorage.getItem('notification')\n//   const notifChat =  await AsyncStorage.getItem('notifChat')\n//   const parsedNotif = JSON.parse(notif)\n//   const parsedChat = JSON.parse(notifChat)\n//   // console.log(getSenderFull(user, parsedChat.users).firstName)\n//   // console.log(parsedNotif)\n//   // console.log(parsedChat._id)\n//   setstoredNotifications(parsedNotif)\n//   // console.log(storedNotifications)\n//   // return JSON.parse(notif);\n// }\nuseEffect(()=> {\n  // console.log(receivedMessage);\n {user && socket.emit('chat_users', {userID : user._id, chatData: chatArr}) }\n  \n}, [])\nuseEffect(()=> {\n  socket.on('activatedUser', (data) => setUsers(data))\n  setonlineStatus(users.onlineStatus)\n  // console.log(onlineStatus)\n  // add new socket for logged out users\n\n  // socket.on('usersResponse', (data) => setUsers(data));\n  // console.log(chatArr)\n}, [])\nuseEffect(() => {\n  //navigation.addListener('focus', UpdateUserRoute)\n  // UpdateUserRoute()\n //  console.log(route.name)\n   // setImage(null)\n  }, [])\n// const UpdateUserRoute = async () => {\n    \n//   try{\n//     console.log(route.name)\n//     const userId = user._id\n//     console.log(userId)\n//     const   config = {\n        \n//       headers: {\n       \n//         Authorization: `Bearer ${user.token}`\n//       },\n//       // body: JSON.stringify({\n//       //   imgsource: newPhoto.base64,\n//       // }),\n//       // body: formData\n//      };\n\n//     const {data} = await axios.put(`http://192.168.100.2:5000/api/users/route`,{\n//       userId: user._id,\n//       route: route.name\n      \n//     }, config)\n//     console.log('user route updated')\n//     // console.log(data.lastSeen)\n//     // setlastseendateandtime(moment(data.lastSeen).format(\"dddd, MMMM Do YYYY\") + \" \" + moment(data.lastSeen).format(\"LT\"))\n\n//   }\n//   catch(err){\n//     console.log(err)\n//   }\n  \n//  }\n  const getNotif = async() =>{\n    // console.log('get notif function')\n        const notif  = await AsyncStorage.getItem('notification')\n        const notifChat =  await AsyncStorage.getItem('notifChat')\n        const parsedNotif = JSON.parse(notif)\n        const parsedChat = JSON.parse(notifChat)\n       \n        // // console.log(getSenderFull(user, parsedChat.users).firstName)\n        // console.log(parsedNotif)\n        // console.log(parsedChat._id)\n        setstoredNotifications(parsedNotif)\n        setnotifChat(parsedChat)\n       // console.log(parsedChat)\n        // console.log(storedNotifications)S\n        // return JSON.parse(notif);\n      } \n\n\n    return(\n \n    <>\n        \n        <ScrollView style = {{\n          backgroundColor: '#fff'\n        }}>\n         \n         <ChatListHeader chatArr={chatArr2}/>\n        <View>\n        \n          <Text>\n          {storedNotifications && storedNotifications.length  ? `` : \"\"}\n          </Text>\n       \n\n        \n        </View>\n        { chattts && chattts.length > 0 ? (chattts.map((chat) => {\n          if(chat != null){\n            if(chat.lastestMessage !== null){\n            }\n          chatArr.push(chat)\n          chatArr2.push(chat)\n          setSelectedChat(chat)\n         \n          if(chat._id === users.chatID && triggerChange)  {\n            if(chat.latestMessage != null){\n            return \n            <Pressable key={chat._id} \n            \n            onPress=\n            {() => \n                  {\n                    \n                    {chat.latestMessage && chat.latestMessage.sender\n                      if(chat.latestMessage.sender._id === user._id){\n                        console.log(\"sender\")\n                        // setreceivedMessage(true)\n                        setsentMessage(true)\n                       }\n                       \n                       else if(chat.latestMessage.sender._id !== user._id){\n                        console.log(\"reciever\")\n                          setsentMessage(false)\n                        \n                       }\n                       else{\n                        null              }\n                      }\n                 \n                  navigation.navigate('Messaging', {chatId: chat._id, userSelected:\n                    \n                  user != null ? getSenderFull(user, chat.users) : null })}}  style={styles.container}>\n                      <View>\n                      <Image \n                          source={{uri: user != null ? getSenderFull(user, chat.users).profilePic : null}}  \n                          style = {styles.image}\n                       />\n                       \n                          { onlineStatus &&  <Badge\n                          status=\"success\"\n                          containerStyle={{ position: 'absolute', top: 50, left: 45 }}\n                              /> \n                          }\n                      </View>\n                        \n                      <View style = {styles.content}>\n                          <View style = {styles.row}>\n                              <Text style = {styles.name}>\n                                  {user != null ? getSenderFull(user, chat.users).firstName : null}\n                              </Text> \n                                <Text style = {styles.subTitle}>\n                                  {/* {dayjs(chat.latestMessage).fromNow(true)} */}\n                                  {formatted_date}\n                              </Text>   \n                          </View>\n                         \n                        \n                          {chat.latestMessage && chat.latestMessage.content?\n                          \n                          <Text> {chat.latestMessage.content}</Text>\n                          \n                             : <Text>File Uploaded</Text> }\n                       \n                      </View>\n                      </Pressable>\n            }\n          }\n          else{\n            // var formatted_date2 = null\n            // if(chat.lastestMessage){\n            //   formatted_date2 = moment(chat.latestMessage.createdAt).format(\"LT\")\n            // }\n            // console.log(formatted_date2)\n            //   if(chat.lastestMessage !== null){\n            //     // console.log('455')\n            //   formatted_date = moment(chat.latestMessage.createdAt).format(\"LT\")\n            //   // console.log(formatted_date)\n            // }\n            // {chat.lastestMessage && chat.lastestMessage.content && console.log('4444')}\n            if(chat.latestMessage != null && triggerChange){\n                return <Pressable key={chat._id}\n                  style={styles.container}\n\n                    onPress={()=>\n                      goToMsg(chat)\n                    }\n                    >\n\n                    <View>\n                    <Image \n                        source={{uri: user != null ? getSenderFull(user, chat.users).profilePic : null}}  \n                        style = {styles.image}\n                     />\n                     \n                         {/* { onlineStatus  && <Badge\n                        status=\"success\"\n                        containerStyle={{ position: 'absolute', top: 50, left: 45 }}\n                            />} */}\n                     {/* <Text>badge here</Text> */}\n                    </View>\n                      \n                    <View style = {styles.content}>\n                        <View style = {styles.row}>\n                            <Text style = {styles.name}>\n                                {user != null ? getSenderFull(user, chat.users).firstName : null}\n                            </Text> \n                              <Text style = {styles.subTitle}>\n                                {/* {dayjs(chat.latestMessage).fromNow(true)} */}\n                              {formatted_date}\n                            </Text>   \n                        </View>\n                        \n                       {/* { messages && messages.map((mess) => {\n                        mess._id == mess.chat.latestMessage ? \n                          (<Text key={mess._id}  numberOfLines={2} style = {styles.subTitle}>\n                          {mess.chat.latestMessage}\n                           </Text>\n                        }}\n                        // <Text numberOfLines={2} style = {styles.subTitle}>\n                        \n        \n                       ))}  */}\n                       {/* { messages && messages.map((mess) => {\n      \n                        if(mess._id == mess.chat.latestMessage){\n                          return <Text   numberOfLines={2} style = {styles.subTitle}>\n                          latest message : {mess.content}\n                           </Text>\n                        \n                        }\n                        else{\n                          return \n                        }\n                         \n                          \n                        \n                        // <Text numberOfLines={2} style = {styles.subTitle}>\n                        \n        \n                       })}  */}\n                      \n                        {chat.latestMessage && chat.latestMessage.content != \"\" ?\n                        <View style = {{\n                          flexDirection: 'row'\n                        }}>\n      \n                        \n                          {/* <Ionicons name=\"checkmark-outline\" size={20} color=\"#593196\" /> */}\n                          \n                           <Text  numberOfLines={2} style = {styles.subTitle}>\n                            {chat.latestMessage.content}\n                          </Text>\n                        </View>\n                        \n                           : <Text>File Uploaded</Text> }\n                         \n                      {/* <Text style = {styles.subTitle} >\n                        {chat.latestMessage}\n                      </Text> */}\n                    </View>\n                    </Pressable>\n            }\n            \n            \n          }\n        \n     \n          \n        }\n       \n\n              })): (\n          <View>\n              <Text style={styles.text}>No chats available click here to access them </Text>\n            </View>\n        )\n        \n              \n        } \n      \n          \n       \n         \n        \n\n          </ScrollView> \n          </>\n        \n    )\n}\n\nexport default ChatScreen\n\nconst styles = StyleSheet.create({\n  con: {\n   \n  \n     \n      marginTop: 200,\n      borderRadius: 15,\n     \n    \n},\ntext: {\n \n  marginTop: 200,\n},\nbuttonStyle: {\n  backgroundColor: \"darkmagenta\",\n  height: 50,\n  marginBottom: 20,\n  justifyContent: \"center\",\n  marginHorizontal: 15,\n  borderRadius: 15,\n},\nbuttonText: {\n  fontSize: 20,\n  textAlign: 'center',\n  color: '#fff',\n  textTransform: 'uppercase',\n  fontWeight: 'bold'\n},\ncontainer: {\n  flexDirection: 'row',\n  marginHorizontal: 10,\n  marginVertical: 5,\n  height: 70,\n  backgroundColor: '#fff'\n},\nimage: {\n  width: 60,\n  height: 60,\n  borderRadius: 30,\n  marginRight: 10\n},\ncontent: {\n  flex: 1,\n  borderBottomWidth: StyleSheet.hairlineWidth,\n  borderBottomColor: 'lightgray'\n},\nrow: {\n  flexDirection: 'row'\n},\nname: {\n  flex: 1,\n  fontWeight: 'bold',\n  fontSize: 16\n},\nsubTitle: {\n  color: \"gray\",\n  marginTop: 2,\n  marginLeft: 2,\n  fontSize: 15\n},\nTex: {\n  marginTop: 200\n}\n\n})"],"mappings":"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"},"metadata":{},"sourceType":"module"}