{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport ChatsScreen from \"../screens/ChatScreen\";\nimport ConnectScreen from \"../screens/ConnectScreen\";\nimport TravelerScreen from \"../screens/TravelerScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport NotImplementedScreen from \"../screens/NotImplementedScreen\";\nimport { Entypo, AntDesign, MaterialIcons, FontAwesome, Feather, Ionicons } from '@expo/vector-icons';\nimport LoginScreen from \"../../src/screens/AuthScreens/LoginScreen\";\nimport { Badge, Icon, withBadge } from '@rneui/themed';\nimport RegisterScreen from \"../../src/screens/AuthScreens/RegisterScreen\";\nimport { useEffect, useState } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Menu, MenuItem, MenuDivider } from 'react-native-material-menu';\nimport { getSenderFull } from \"../ChatConfig/ChatLogics\";\nimport { useSelector } from 'react-redux';\nimport Test from \"../screens/Test\";\nimport ChatScreen from \"../screens/ChatScreen\";\nimport { useNavigation } from '@react-navigation/native';\nimport Test2 from \"../screens/Test2\";\nimport TestImg from \"../screens/TestImg\";\nimport RecentlyTest from \"../screens/RecentlyTest\";\nimport UserTest from \"../screens/UserTest\";\nimport PushScreen from \"../screens/PushScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nvar MainTabNavigator = function MainTabNavigator() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    storedNotifications = _useState2[0],\n    setstoredNotifications = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notifChat = _useState4[0],\n    setnotifChat = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    visible = _useState6[0],\n    setVisible = _useState6[1];\n  var navigate = useNavigation();\n  var hideMenu = function hideMenu() {\n    return setVisible(false);\n  };\n  var showMenu = function showMenu() {\n    return setVisible(true);\n  };\n  var _useSelector = useSelector(function (state) {\n      return state.auth;\n    }),\n    user = _useSelector.user;\n  useEffect(function () {\n    getNotif();\n    console.log(storedNotifications);\n  }, []);\n  var getNotif = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var notif = yield AsyncStorage.getItem('notification');\n      var notifChat = yield AsyncStorage.getItem('notifChat');\n      var parsedNotif = JSON.parse(notif);\n      var parsedChat = JSON.parse(notifChat);\n      setstoredNotifications(parsedNotif);\n      setnotifChat(parsedChat);\n    });\n    return function getNotif() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(Tab.Navigator, {\n    initialRouteName: \"Chats\",\n    screenOptions: {\n      tabBarActiveTintColor: '#593196',\n      tabBarStyle: {\n        backgroundColor: '#f9f8fc'\n      },\n      headerStyle: {\n        backgroundColor: '#f9f8fc'\n      }\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Connect\",\n      component: ConnectScreen,\n      options: {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var color = _ref2.color,\n            size = _ref2.size;\n          return _jsx(FontAwesome, {\n            name: \"users\",\n            size: size,\n            color: color\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Chats\",\n      component: ChatScreen,\n      options: {\n        tabBarIcon: function tabBarIcon(_ref3) {\n          var color = _ref3.color,\n            size = _ref3.size;\n          return _jsx(Entypo, {\n            name: \"chat\",\n            size: size,\n            color: color\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen,\n      options: {\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var color = _ref4.color,\n            size = _ref4.size;\n          return _jsx(AntDesign, {\n            name: \"user\",\n            size: size,\n            color: color\n          });\n        },\n        headerShown: false\n      }\n    })]\n  });\n};\nexport default MainTabNavigator;\nvar styles = StyleSheet.create({\n  notificationBell: {\n    marginRight: 20\n  }\n});","map":{"version":3,"names":["createBottomTabNavigator","ChatsScreen","ConnectScreen","TravelerScreen","ProfileScreen","NotImplementedScreen","Entypo","AntDesign","MaterialIcons","FontAwesome","Feather","Ionicons","LoginScreen","Badge","Icon","withBadge","RegisterScreen","useEffect","useState","AsyncStorage","Menu","MenuItem","MenuDivider","getSenderFull","useSelector","Test","ChatScreen","useNavigation","Test2","TestImg","RecentlyTest","UserTest","PushScreen","Tab","MainTabNavigator","storedNotifications","setstoredNotifications","notifChat","setnotifChat","visible","setVisible","navigate","hideMenu","showMenu","state","auth","user","getNotif","console","log","notif","getItem","parsedNotif","JSON","parse","parsedChat","tabBarActiveTintColor","tabBarStyle","backgroundColor","headerStyle","tabBarIcon","color","size","headerShown","styles","StyleSheet","create","notificationBell","marginRight"],"sources":["/home/dagmawi/personal/borsa/myborsa/borsa-ui/src/navigation/MainTabNavigator.js"],"sourcesContent":["import {View, Text, Pressable, StyleSheet} from 'react-native'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport ChatsScreen from '../screens/ChatScreen';\nimport ConnectScreen from \"../screens/ConnectScreen\"\nimport TravelerScreen from '../screens/TravelerScreen';\nimport ProfileScreen from '../screens/ProfileScreen';\nimport NotImplementedScreen from '../screens/NotImplementedScreen';\nimport { Entypo, AntDesign, MaterialIcons, FontAwesome, Feather, Ionicons } from '@expo/vector-icons'; \nimport LoginScreen from '../../src/screens/AuthScreens/LoginScreen';\nimport { Badge, Icon, withBadge } from '@rneui/themed';\nimport RegisterScreen from '../../src/screens/AuthScreens/RegisterScreen';\nimport { useEffect, useState } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Menu, MenuItem, MenuDivider } from 'react-native-material-menu';\nimport { getSenderFull } from '../ChatConfig/ChatLogics';\nimport { useSelector } from 'react-redux';\nimport Test from '../screens/Test';\nimport ChatScreen from '../screens/ChatScreen';\nimport { useNavigation } from '@react-navigation/native';\nimport Test2 from '../screens/Test2';\nimport TestImg from '../screens/TestImg';\nimport RecentlyTest from '../screens/RecentlyTest';\nimport UserTest from '../screens/UserTest';\nimport PushScreen from '../screens/PushScreen';\nconst Tab = createBottomTabNavigator();\n\nconst MainTabNavigator = () => {\n   \n    const [storedNotifications, setstoredNotifications] = useState([])\n    const [notifChat, setnotifChat] = useState()\n    const [visible, setVisible] = useState(false);\n    const navigate = useNavigation()\n    const hideMenu = () => setVisible(false);\n\n    const showMenu = () => setVisible(true);\n    const { user } = useSelector((state) => state.auth)\n    useEffect(() =>{\n       getNotif()\n    //    {storedNotifications  && console.log(storedNotifications[0].chatUsers)}\n    console.log(storedNotifications)\n    //     console.log(notificationstored)\n      \n      }, [])\n      const getNotif = async() =>{\n        const notif  = await AsyncStorage.getItem('notification')\n        const notifChat =  await AsyncStorage.getItem('notifChat')\n        const parsedNotif = JSON.parse(notif)\n        const parsedChat = JSON.parse(notifChat)\n       \n        // console.log(getSenderFull(user, parsedChat.users).firstName)\n        // console.log(parsedNotif)\n        // console.log(parsedChat._id)\n        setstoredNotifications(parsedNotif)\n        setnotifChat(parsedChat)\n        // console.log(parsedChat)\n        // console.log(storedNotifications)\n        // return JSON.parse(notif);\n      } \n    //   const BadgedIcon = withBadge(storedNotifications.length)(Icon);\n  return (\n    <Tab.Navigator initialRouteName='Chats' screenOptions={{tabBarActiveTintColor: '#593196', tabBarStyle: {\n        backgroundColor: '#f9f8fc'\n    }, headerStyle: {\n        backgroundColor: '#f9f8fc',\n    },\n      \n    }}>\n        <Tab.Screen name=\"Connect\" component={ConnectScreen} options={{\n            tabBarIcon: ({color, size}) => (\n                <FontAwesome name=\"users\" size={size} color={color} />\n            )\n        }} />\n\n        {/* <Tab.Screen name=\"Login\" component={LoginScreen} options={{\n            tabBarIcon: ({color, size}) => (\n                <AntDesign name=\"user\" size={size} color={color} />\n            ),\n            headerShown: false\n        }} /> */}\n        \n        <Tab.Screen name=\"Chats\" component={ChatScreen} options={{\n           tabBarIcon: ({color, size}) => (\n            <Entypo name=\"chat\" size={size} color={color} />\n            \n        ),\n        // headerRight: () => (\n        //     <>\n        //     <Pressable style={styles.notificationBell} onPress={() => showMenu()}>\n        //          <BadgedIcon type=\"ionicon\" name=\"notifications-sharp\" />\n        //          <Menu\n        //                 visible={visible}\n                       \n        //                 onRequestClose={hideMenu}\n        //             >\n        //              {storedNotifications && storedNotifications.map(notif => (\n        //                     <MenuItem key={notif._id} onPress={() => {hideMenu()\n        //                         setstoredNotifications(storedNotifications.filter((n) => n !== notif))\n        //                         // navigate.navigate('Messaging', {chatId: storedNotifications[0]._id, userSelected:\n            \n        //                         //     user != null ? getSenderFull(user, chat.users).userName : null })\n        //                     }\n        //                     }>\n        //                        {notifChat && user && <Text> new message from {getSenderFull(user, notifChat.users).firstName} </Text>}\n        //                     </MenuItem>\n        //                 ))} \n        //               {/* <MenuItem onPress={hideMenu}>\n        //                         new message from {getSenderFull(user, notifChat.users).firstName}\n        //                     </MenuItem> */}\n                  \n                      \n        //             </Menu>\n    \n        //     </Pressable>\n        //     </>\n           \n        // )\n        }} />\n\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} options={{\n            tabBarIcon: ({color, size}) => (\n                <AntDesign name=\"user\" size={size} color={color} />\n            ),\n            headerShown: false\n        }} />\n        \n        {/* <Tab.Screen name=\"Profile\" component={ProfileScreen} options={{\n            tabBarIcon: ({color, size}) => (\n                <AntDesign name=\"user\" size={size} color={color} />\n            ),\n            headerShown: false\n        }} /> */}\n        {/* <Tab.Screen name=\"Register\" component={RegisterScreen} options={{\n            tabBarIcon: ({color, size}) => (\n                <AntDesign name=\"user\" size={size} color={color} />\n            ),\n            headerShown: false\n        }} /> */}\n    </Tab.Navigator>\n  )\n}\n\nexport default MainTabNavigator\n\nconst styles = StyleSheet.create({\n    notificationBell: {\n     \n    \n       \n        marginRight: 20,\n       \n       \n      \n  },\n \n  \n  })"],"mappings":"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"},"metadata":{},"sourceType":"module"}